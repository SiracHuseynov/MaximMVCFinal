@using Maxim.Core.Models
@using X.PagedList
@using X.PagedList.Mvc.Core
@model IPagedList<Worker>

@{
    int counter = 1;
}
<div class="container">
    <div class="row mb-3">
        <div class="col-3">
            <a asp-action="Create" class="btn btn-outline-primary">Create Worker</a>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Id</th>
                        <th scope="col">FullName</th>
                        <th scope="col">Specialty</th>
                        <th scope="col">Image</th>
                        <th scope="col">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <th scope="row">@(counter++)</th>
                            <td>@item.Id</td>
                            <td>@item.FullName</td>
                            <td>@item.Specialty</td>
                            <td><img src="~/uploads/workers/@item.ImageUrl" height="100" /></td>
                            <td>
                                <a asp-action="Update" asp-route-id="@item.Id" class="btn btn-outline-warning">Update</a>
                                <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-outline-danger">Delete</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>


<div class="container">
    <div class="row">
        <div class="pagination-container">
            @Html.PagedListPager(Model, page => Url.Action("Index", new { pageIndex = page, pageSize = Model.PageSize }));
        </div>
    </div>
</div>